#include <cmath>  - lets you use mathematical functions
#include <String> - lets you have access to string methods and datatype
	- getline(cin or iFile, variable to store); 
#include <fstream> - lets you write to files and view contents of files
#include <iomanip> - access to functions that manipulate output and input
#include <ctime> - random functions
-----------------------------------------------------------------------------
Conditionals:
	if statement syntax( if(y<x){} ) like java is contained in brackets 

-----------------------------------------------------------------------------
setprecision(decimalplaces);
double price = 3.333333
cout<< setprecision(5)<<price; == 3.3333: five total places

-----------------------------------------------------------------------------
Increment and Decrement operators:
	post fix mode
	num++; // increment by one
	num--; // decrement by one

	prefix mode
	++num;
	--num;

	ex: cout<< num++; //will output 4, then will alter the num variable
	
-----------------------------------------------------------------------------
Loops
	conditional loop: executes as long as statement is true
	- do while
	- while

	count-controlled loop: runs specific number of times
	- for loop

	while loop
		while(parameters){
			statement;
		}

	do while loop
		do{
			statement
		}
		while(expression); //there needs to be a semicolon

		//basically the do while is the statement under the while loop(postcheck)
		//while loop = precheck,   do while = postcheck

	for loop
		for(int count = 0; count<= 10; count++){
			statement;
		}
		// both of these have same application as java

	sentinel values:
		Special value that marks the end of a list of values
		while(points != -1){}

	break: breaks loop
	continue: rechecks header
		while(num++ < 10){
		if(num == 4)
			continue;
		cout<<num<<" ";
		}
		
-----------------------------------------------------------------------------
Typecasting
	static_cast<DataType>(value);
		- manually changes type of datatype

		ex. double number = 3.7;
		int val;
		val = static_cast<int>(number);
		
-----------------------------------------------------------------------------
Functions
	(void) DataType varName(parameters, parameters){}
		- return will output variable of same datatype as the function
		- adding void to the function will not return anything to the main() function
	prototypes:
		- int addition(int, int); // outside of main function
		- when it is declared you can define the function outside of the main() function and call it into the main function using main local variables
		- can also have default arguments that will be called if no, or few parameters are passed
		ex.
			#include <iostream>
			using namespace std;
			void test(int = 2, int = 4, int = 6);

			int main(){
				test();
				test(6);
				test(3,9);
				test(1,5,7);
				return 0;
			}
			void test(int first, int second, int third){ // default variables will come into play here
				first += 3;
				second += 6;
				third += 9;
				cout<<first<<" "<<second<<" "<<third<<endl;
			}
	overloading:
		- Two or more functions may have the same same, as long as their parameter lists are different
		ex.
			//same function, both have correct syntax
			int square(int number)
			double square(double number)
			
-----------------------------------------------------------------------------
rand() function
	rand()%range+1; // gets you 1-range amount of random numbers
		- srand(time(NULL)); // resets random numbers in memory
			* must make sure you update <iostream > library in compiler -- (g++ -std=c++11 CoinToss.cpp)
			
-----------------------------------------------------------------------------
Global variables
	- must be defined outside of any functions and the main function
	- they are automatically given a value of 0 when initialized
	- best used when you want a constant variable to refer to constantly
	- called using const <datatype> variable;

	ex.
		const int num; //global variable
		void aFunc90(){
			num++
			cout<<num;
		}
		int main(){
			num++;
			cout<<num;
			aFunc();
			cout<<num;
		}

	- static function creates persistent variable, not universal
	ex.
		void showStatic();
		int main(){
			for(int i = 0; i<5; i++){
				showStatic();
			}
			return 0;
		}
		void showStatic(){
			static int statNum; //automatically assigned to 0

			cout<<"statNum is "<<statNum<<endl;
			statNum++;
		}

-----------------------------------------------------------------------------
Reference variables
	- Use & to get variable memory location
	- Allows the function to access the parameter's original argument
		*This permanently change it
	ex.
		int main(){
			int value = 5;
			cout<< value;
			cout<< &value;// 23BC hexadecimal value the variable is stored at in memory

		}
	ex.
		void func1(int &, int &);
		void func2(int &, int &, int &);
		void func3(int, int, int);

		int main(){
			func1(x,y)
			return 0
		}
		void func1(int &a, int &b){
			cout<< "Enter two numbers: ";
			cin>>a>>b;
		}
		void func2(int &a, int &b, int &c){
			b++;
			c--;
			a = b+c;
		}
		void func3(){
			a = b - c;
		}

-----------------------------------------------------------------------------
Arrays
	- Lists of multiple values of the same datatype
	- Initialize: type variableName[#_ELEMENTS(optional, can be open but must initialize values in curly brackets)] = {} // can initialize as empty, or full of values
	- Uninitialized elements are automatically defaulted to equal 0
		* when you define how many elements are in the array remember that the each element is assigned starting at the # 0 (i.e. array[1] = 2nd element in array)
	ex.
		const int ARRAY_SIZE = 5;
		int numbers[ARRAY_SIZE];
		for(int i = 0; i< ARRAY_SIZE; i++){
			numbers[i] = 99;
		}
		// this algorithm with scan through the array and set the 5 elements equal to 99
	- Unlike other programming languages, there is no bounds checking with c++
	- Arrays can be initialized to be 2d (int numbers[rows][cols])
	ex.
		void showArray(const int numbers[][COLS], int rows){
			for(int r = 0; r< rows; r++){
				for(int c = 0; c< COLS; c++){
					cout<< setw(4)<<numbers[r][c]<<" ";
				}
				cout<<endl;
			}
		}
	
-----------------------------------------------------------------------------
Makefiles
	- Put in any folder to run commands automatically
	- initialize as Makefile in folder with no extension(ie. no .cpp or .txt)
		o Only one makefile per folder!

-----------------------------------------------------------------------------
Header files
	- Is a way to store function prototypes
	Commands:
		- #ifndef HEADERFILENAME_H // Should have same name at .h file just in all caps
		- #define HEADFILE_H // both of these are default directives to include in every headerfile
		- #endif // ends directives, put at end of headerfile
		- #include "headerfilename.h"
		
	- To use properly, make header file to define function prototypes, make a cpp file of the same name and write out the functions